{"version":3,"sources":["../src/transcription.ts"],"sourcesContent":["// SPDX-FileCopyrightText: 2024 LiveKit, Inc.\n//\n// SPDX-License-Identifier: Apache-2.0\nimport type { AudioFrame, Room } from '@livekit/rtc-node';\nimport { log } from './log.js';\n\nexport interface TranscriptionForwarder {\n  start(): void;\n  pushAudio(frame: AudioFrame): void;\n  pushText(text: string): void;\n  markTextComplete(): void;\n  markAudioComplete(): void;\n  close(interrupt: boolean): Promise<void>;\n  currentCharacterIndex: number;\n  text: string;\n}\n\nexport class BasicTranscriptionForwarder implements TranscriptionForwarder {\n  #room: Room;\n  #participantIdentity: string;\n  #trackSid: string;\n  #currentText: string = '';\n  #totalAudioDuration: number = 0;\n  #currentPlayoutTime: number = 0;\n  #DEFAULT_CHARS_PER_SECOND = 16;\n  #charsPerSecond: number = this.#DEFAULT_CHARS_PER_SECOND;\n  #messageId: string;\n  #isRunning: boolean = false;\n  #logger = log();\n  currentCharacterIndex: number = 0;\n\n  constructor(room: Room, participantIdentity: string, trackSid: string, messageId: string) {\n    this.#room = room;\n    this.#participantIdentity = participantIdentity;\n    this.#trackSid = trackSid;\n    this.#messageId = messageId;\n  }\n\n  get text(): string {\n    return this.#currentText;\n  }\n\n  start(): void {\n    if (!this.#isRunning) {\n      this.#isRunning = true;\n      this.#startPublishingLoop().catch((error) => {\n        this.#logger.error('Error in publishing loop:', error);\n        this.#isRunning = false;\n      });\n    }\n  }\n\n  pushAudio(frame: AudioFrame): void {\n    this.#totalAudioDuration += frame.samplesPerChannel / frame.sampleRate;\n  }\n\n  pushText(text: string): void {\n    this.#currentText += text;\n  }\n\n  #textIsComplete: boolean = false;\n  #audioIsComplete: boolean = false;\n\n  markTextComplete(): void {\n    this.#textIsComplete = true;\n    this.#adjustTimingIfBothFinished();\n  }\n\n  markAudioComplete(): void {\n    this.#audioIsComplete = true;\n    this.#adjustTimingIfBothFinished();\n  }\n\n  #adjustTimingIfBothFinished(): void {\n    if (this.#textIsComplete && this.#audioIsComplete) {\n      const actualDuration = this.#totalAudioDuration;\n      if (actualDuration > 0 && this.#currentText.length > 0) {\n        this.#charsPerSecond = this.#currentText.length / actualDuration;\n      }\n    }\n  }\n\n  #computeSleepInterval(): number {\n    return Math.min(Math.max(1 / this.#charsPerSecond, 0.0625), 0.5);\n  }\n\n  async #startPublishingLoop(): Promise<void> {\n    this.#isRunning = true;\n    let sleepInterval = this.#computeSleepInterval();\n    let isComplete = false;\n    while (this.#isRunning && !isComplete) {\n      this.#currentPlayoutTime += sleepInterval;\n      this.currentCharacterIndex = Math.floor(this.#currentPlayoutTime * this.#charsPerSecond);\n      isComplete = this.#textIsComplete && this.currentCharacterIndex >= this.#currentText.length;\n      await this.#publishTranscription(false);\n      if (this.#isRunning && !isComplete) {\n        sleepInterval = this.#computeSleepInterval();\n        await new Promise((resolve) => setTimeout(resolve, sleepInterval * 1000));\n      }\n    }\n\n    if (this.#isRunning) {\n      this.close(false);\n    }\n  }\n\n  async #publishTranscription(final: boolean): Promise<void> {\n    const textToPublish = this.#currentText.slice(0, this.currentCharacterIndex);\n    await this.#room.localParticipant?.publishTranscription({\n      participantIdentity: this.#participantIdentity,\n      trackSid: this.#trackSid,\n      segments: [\n        {\n          text: textToPublish,\n          final: final,\n          id: this.#messageId,\n          startTime: BigInt(0),\n          endTime: BigInt(0),\n          language: '',\n        },\n      ],\n    });\n  }\n\n  async close(interrupt: boolean): Promise<void> {\n    this.#isRunning = false;\n\n    // Publish whatever we had as final\n    if (!interrupt) {\n      this.currentCharacterIndex = this.#currentText.length;\n    }\n    await this.#publishTranscription(true);\n  }\n}\n"],"mappings":"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","names":[]}